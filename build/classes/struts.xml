<?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
	<!-- i18n:国际化. 解决post提交乱码 -->
	<constant name="struts.i18n.encoding" value="UTF-8"></constant>
	<!-- 指定反问action时的后缀名 ，下面这个是action
		http://localhost:8080/struts2_day01/hello/HelloAction.do
	-->
	<constant name="struts.action.extension" value="action"></constant>
	<!-- 指定struts2是否以开发模式运行（默认值是false）
			1.热加载主配置.(不需要重启即可生效)
			2.提供更多错误信息输出,方便开发时的调试
	 -->
	<constant name="struts.devMode" value="true"></constant>
	
	<!-- action元素:配置action类
		name属性: 决定了Action访问资源名.
		class属性: action的完整类名
		method属性: 指定调用Action中的哪个方法来处理请求
	 -->
	<constant name="struts.devMode" value="true"></constant>	
	 
	<!-- #  struts.objectFactory = spring	将action的创建交给spring容器	
			struts.objectFactory.spring.autoWire = name spring负责装配Action依赖属性(这个默认是打开的，不需要配置)
			-->
	<constant name="struts.objectFactory" value="spring"></constant>
	
	
	<package name="crm" namespace="/" extends="struts-default">
		
		<!-- 1.注册拦截器 -->
		<!-- 2.注册拦截器栈 -->
			<!-- 3.自定义拦截器引入，建议放在20拦截器之前 -->
				<!-- 指定不拦截的方法  -->
				<!-- 指定拦截的方法,这两个方法不能同时存在；要么指定拦截，要么指定不拦截的
					<param name="includeMethods">add,delete</param>-->
						<!-- 4.指定默认拦截器栈 -->
		<!--<interceptors>
			<interceptor name="LoginIntercepter" class="com.web.intercepter.LoginIntercepter"></interceptor>
			
			<interceptor-stack name="mystack">
		
				<interceptor-ref name="LoginIntercepter">
				
					<param name="excludeMethods">login</param>
					
				</interceptor-ref>
				<interceptor-ref name="defaultStack"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
	
		<default-interceptor-ref name="mystack"></default-interceptor-ref>-->
		
		
	
	<!-- 如果找不到action的话，默认找下面这name的action -->
		<default-action-ref name="HelloAction"></default-action-ref>
		
		<!-- 定义全局结果集 -->
		<global-results >
			<result name="toLogin" type="redirect">/login.jsp</result>
		</global-results>
		
		<!-- 设置异常处理，出现这个异常的话，转到‘loginError’ -->
		<global-exception-mappings>
			<exception-mapping result="loginError" exception="java.lang.RuntimeException"></exception-mapping>
		</global-exception-mappings>
		
		<action name="HelloAction" class="com.web.test.HelloAction" method="hello" >
			<!-- result元素:结果配置 
				name属性: 标识结果处理的名称.与action方法的返回值对应.
				type属性: 指定调用哪一个result类来处理结果,默认使用转发.（还有重定向跟其他）
					dispatcher:转发； redirect:重定向； chain:转发到action；redirectAction:重定向到action
				标签体:填写页面的相对路径
			-->
			<result name="success" type="dispatcher" >/test/testStruts2.jsp</result>
		</action>
		
		<!-- 
		动态方法调用方式，使用通配符
		 -->
		<action name="CustomerAction_*" class="com.web.CustomerAction" method="{1}" >
			<result name="listCustomer" type="dispatcher" >/jsp/customer/list.jsp</result>
			<result name="toListCustomer" type="redirectAction" >
				<param name="actionName">CustomerAction_listCustomer</param>
				<param name="namespace">/</param>
			</result>
			<result name="pageListCustomer" type="dispatcher">/jsp/customer/pageList.jsp</result>
		</action>
		
		<action name="UserAction_*" class="userAction" method="{1}" >
			<result name="toIndex" type="redirect" >/index.htm</result>
			<result name="loginError" type="redirect" >/login.jsp</result>
		</action>
		<!-- 这个主要是用来做测试的 -->
		<action name="test_*" class="com.web.test.TestSpirng" method="{1}">
			<result name="success" type="dispatcher" >/test/testSpring.jsp</result>
		</action>
		
	</package>
</struts>